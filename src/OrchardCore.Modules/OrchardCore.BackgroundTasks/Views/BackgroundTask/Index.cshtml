@model BackgroundTaskIndexViewModel

<h1>@RenderTitleSegments(T["Background Tasks"])</h1>

<nav class="admin-toolbar">
    <ul class="navbar-nav mr-auto">
        <li class="nav-item">
            <a asp-route-action="Create" class="btn btn-primary" role="button">@T["Add Settings"]</a>
        </li>
    </ul>
</nav>

@if (Model.IsRunning)
{
    <div class="alert alert-success" role="alert">
        <span><i class="fa fa-refresh fa-spin" aria-hidden="true"></i></span>
        @T["The Background Service is running."]
    </div>
}
else
{
    <div class="alert alert-warning" role="alert">
        <span><i class="fa fa-refresh" aria-hidden="true"></i></span>
        @T["The Background Service is stopped or not yet started."]
    </div>
}

<form asp-action="Index"> @* the form is necessary to generate and antiforgery token for the delete action *@

    @if (Model.Tasks.Any())
    {
        <ul class="list-group">
            @foreach (var entry in Model.Tasks)
            {
                <li class="list-group-item">
                    <div class="properties">
                        <div class="related">
                            <a asp-action="Edit" asp-route-name="@entry.Name" class="btn btn-primary btn-sm">@T["Edit"]</a>
                            <a asp-action="Delete" asp-route-name="@entry.Name" class="btn btn-danger btn-sm" itemprop="RemoveUrl UnsafeUrl">@T["Delete"]</a>
                            <button type="button" class="btn btn-secondary btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                @T["Actions"]
                            </button>
                            <div class="dropdown-menu dropdown-menu-right">

                            @if (true)
                            {
                                <a asp-action="Lock" asp-route-name="@entry.Name" class="dropdown-item btn-sm" itemprop="UnsafeUrl">@T["Lock "]</a>
                                <a asp-action="Unlock" asp-route-name="@entry.Name" class="dropdown-item btn-sm" itemprop="UnsafeUrl">@T["Unlock"]</a>
                                <div class="dropdown-divider"></div>
                                <a asp-action="ResetCount" asp-route-name="@entry.Name" class="dropdown-item btn-sm" itemprop="UnsafeUrl">@T["Reset Count "]</a>
                                <a asp-action="ResetFault" asp-route-name="@entry.Name" class="dropdown-item btn-sm" itemprop="UnsafeUrl">@T["Reset Fault"]</a>
                            }
                            </div>
                        </div>
                        <a asp-action="Edit" asp-route-name="@entry.Name">@entry.Name</a>
                        @if (!String.IsNullOrWhiteSpace(entry.Description))
                        {
                            <span class="hint">
                                @T["â€” {0}", entry.Description]
                          </span>
                        }
                    </div>

                    @if (entry.State == BackgroundTaskState.Undefined)
                    {
                        <span class="badge badge-secondary" title="@T["Not Available"]">
                            <i class="fa fa-question" aria-hidden="true"></i> @T["Not Available"]
                        </span>
                    }
                    else
                    {
                        if (!entry.Settings.Enable)
                        {
                            <span class="badge badge-warning" title="@T["Disabled"]">
                                <i class="fa fa-ban" aria-hidden="true"></i> @T["Disabled"]
                            </span>
                        }

                        if (entry.Settings.Enable && entry.State.Status == BackgroundTaskStatus.Idle)
                        {
                            <span class="badge badge-info" title="@T["Idle"]">
                                <i class="fa fa-coffee" aria-hidden="true"></i> @T["Idle"]
                            </span>
                            <span class="badge badge-light" title="@T["Next Start Time"]">
                                <i class="fa fa-clock-o" aria-hidden="true"></i> @T["Next"] @entry.State.NextStartTime.ToShortDateString() @entry.State.NextStartTime.ToShortTimeString()
                            </span>
                        }
                        else if (entry.State.Status == BackgroundTaskStatus.Running)
                        {
                            <span class="badge badge-success" title="@T["Running"]">
                                <i class="fa fa-refresh fa-spin" aria-hidden="true"></i> @T["Running"]
                            </span>
                        }
                        else if (entry.State.Status == BackgroundTaskStatus.Locked)
                        {
                            <span class="badge badge-warning" title="@T["Locked"]">
                                <i class="fa fa-lock" aria-hidden="true"></i> @T["Locked"]
                            </span>
                        }

                        if (entry.State.StartCount > 0)
                        {
                            <span class="badge badge-success" title="@T["Last Start Time"]">
                                <i class="fa fa-clock-o" aria-hidden="true"></i> @T["Last"] @entry.State.LastStartTime.ToShortDateString() @entry.State.LastStartTime.ToShortTimeString()
                            </span>
                            <span class="badge badge-light" title="@T["Last Execution Time"]">
                                <i class="fa fa-stopwatch" aria-hidden="true"></i> @entry.State.LastExecutionTime.ToString(@"hh\:mm\:ss\.fff")
                            </span>
                           <span class="badge badge-success" title="@T["Start Count"]">
                                <i class="fa fa-refresh" aria-hidden="true"></i> @entry.State.StartCount
                            </span>
                            <span class="badge badge-light" title="@T["Total Execution Time"]">
                                <i class="fa fa-stopwatch" aria-hidden="true"></i> @entry.State.TotalExecutionTime.ToString(@"hh\:mm\:ss\.fff")
                            </span>
                        }
                    }
                </li>

                if (!string.IsNullOrWhiteSpace(entry.State.FaultMessage))
                {
                    <li class="alert alert-danger" role="alert">
                        @entry.State.FaultMessage
                        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </li>
                }
            }
        </ul>
    }
    else
    {
        <div class="alert alert-info" role="alert">
            @T["<strong>Nothing here!</strong> There are no task definition for the moment."]
        </div>
    }
</form>

@await DisplayAsync(Model.Pager)
