@model SiteSettingsViewModel
@using NodaTime

<fieldset class="form-group" asp-validation-class-for="SiteName">
    <label asp-for="SiteName">@T["Site name"] <span asp-validation-for="SiteName"></span></label>
    <input asp-for="SiteName" class="form-control" />
    <span class="hint">@T["The site name."]</span>
</fieldset>

<fieldset class="form-group" asp-validation-class-for="TimeZone">
    <label asp-for="TimeZone">@T["Default Time Zone"] <span asp-validation-for="TimeZone"></span></label>
    <select asp-for="TimeZone" class="form-control">
        <option value="">@T["Local to server"]</option>
        @foreach (var timezone in Model.TimeZones)
        {
            <option value="@timezone.Id" selected="@(Model.TimeZone == timezone.Id)">@timezone.DisplayName - @timezone.Comment</option>
        }
    </select>
    <span class="hint">@T["Determines the default time zone used when displaying and editing dates and times."]</span>
</fieldset>
<fieldset>
    <div>Current moment in time: @SystemClock.Instance.GetCurrentInstant()</div>
    <div>Current system time zone: @DateTimeZoneProviders.Tzdb.GetSystemDefault()</div>
    <div>Current system time : @SystemClock.Instance.GetCurrentInstant().InZone(DateTimeZoneProviders.Tzdb.GetSystemDefault())</div>
    @if(Model.TimeZone != null){
    <div>Selected time zone time (@Model.TimeZone) : @SystemClock.Instance.GetCurrentInstant().InZone(DateTimeZoneProviders.Tzdb.GetZoneOrNull(Model.TimeZone))</div>
    }
</fieldset>
